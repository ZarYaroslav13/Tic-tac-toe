<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="_game_service_tests_8cs" kind="file" language="C#">
    <compoundname>GameServiceTests.cs</compoundname>
    <innerclass refid="class_client_1_1_domain_1_1_tests_1_1_game_service_tests" prot="public">Client::Domain::Tests::GameServiceTests</innerclass>
    <innernamespace refid="namespace_client">Client</innernamespace>
    <innernamespace refid="namespace_client_1_1_domain">Client::Domain</innernamespace>
    <innernamespace refid="namespace_client_1_1_domain_1_1_tests">Client::Domain::Tests</innernamespace>
    <innernamespace refid="namespace_fake_it_easy">FakeItEasy</innernamespace>
    <innernamespace refid="namespace_system_1_1_i_o_1_1_ports">System::IO::Ports</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="namespace_client_1_1_domain_1_1_services_1_1_game_service" kindref="compound">Client.Domain.Services.GameService</ref>;</highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="namespace_client_1_1_domain_1_1_services_1_1_i_storage_manager" kindref="compound">Client.Domain.Services.IStorageManager</ref>;</highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="namespace_client_1_1_domain_1_1_services_1_1_server_service" kindref="compound">Client.Domain.Services.ServerService</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="namespace_client_1_1_domain_1_1_services_1_1_settings" kindref="compound">Client.Domain.Services.Settings</ref>;</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="namespace_client_1_1_domain_1_1_services_1_1_settings_1_1_game_settings_service" kindref="compound">Client.Domain.Services.Settings.GameSettingsService</ref>;</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="namespace_client_1_1_domain_1_1_services_1_1_settings_1_1_port_settings_service" kindref="compound">Client.Domain.Services.Settings.PortSettingsService</ref>;</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">FakeItEasy;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">System.IO.Ports;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10" refid="namespace_client" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_client_1_1_domain_1_1_tests" kindref="compound">Client.Domain.Tests</ref>;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal">[TestClass]</highlight></codeline>
<codeline lineno="18" refid="class_client_1_1_domain_1_1_tests_1_1_game_service_tests" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_client_1_1_domain_1_1_tests_1_1_game_service_tests" kindref="compound">GameServiceTests</ref></highlight></codeline>
<codeline lineno="19"><highlight class="normal">{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>readonly<sp/><ref refid="interface_client_1_1_domain_1_1_services_1_1_i_storage_manager_1_1_i_game_storage_manager" kindref="compound">IGameStorageManager</ref><sp/>_storageManager;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>readonly<sp/><ref refid="interface_client_1_1_domain_1_1_services_1_1_settings_1_1_game_settings_service_1_1_i_game_settings_service" kindref="compound">IGameSettingsService</ref><sp/>_gameSettings;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>readonly<sp/><ref refid="interface_client_1_1_domain_1_1_services_1_1_settings_1_1_port_settings_service_1_1_i_port_settings_service" kindref="compound">IPortSettingsService</ref><sp/>_portSettings;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>readonly<sp/><ref refid="interface_client_1_1_domain_1_1_services_1_1_settings_1_1_i_settings_service" kindref="compound">ISettingsService</ref><sp/>_settings;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>readonly<sp/><ref refid="class_client_1_1_domain_1_1_services_1_1_game_service_1_1_game_service" kindref="compound">GameService</ref><sp/>_gameService;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_client_1_1_domain_1_1_tests_1_1_game_service_tests_1abe8c7e2b52b4cab8d7dab720c060c140" kindref="member">GameServiceTests</ref>()</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_storageManager<sp/>=<sp/>A.Fake&lt;<ref refid="interface_client_1_1_domain_1_1_services_1_1_i_storage_manager_1_1_i_game_storage_manager" kindref="compound">IGameStorageManager</ref>&gt;();</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_gameSettings<sp/>=<sp/>A.Fake&lt;<ref refid="interface_client_1_1_domain_1_1_services_1_1_settings_1_1_game_settings_service_1_1_i_game_settings_service" kindref="compound">IGameSettingsService</ref>&gt;();</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_portSettings<sp/>=<sp/>A.Fake&lt;<ref refid="interface_client_1_1_domain_1_1_services_1_1_settings_1_1_port_settings_service_1_1_i_port_settings_service" kindref="compound">IPortSettingsService</ref>&gt;();</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_settings<sp/>=<sp/>A.Fake&lt;<ref refid="interface_client_1_1_domain_1_1_services_1_1_settings_1_1_i_settings_service" kindref="compound">ISettingsService</ref>&gt;();</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A.CallTo(()<sp/>=&gt;<sp/>_settings.GetGameSettings()).Returns(_gameSettings);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A.CallTo(()<sp/>=&gt;<sp/>_settings.GetPortSettings()).Returns(_portSettings);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_gameService<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(_storageManager,<sp/>_settings);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>[TestMethod]</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_client_1_1_domain_1_1_tests_1_1_game_service_tests_1adea02df513edb10b2e0b47d34b60d1ed" kindref="member">Constructor_ThrowArgumentNullException_WhenArgumentsAreNull</ref>()</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.ThrowsException&lt;ArgumentNullException&gt;(()<sp/>=&gt;<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_client_1_1_domain_1_1_services_1_1_game_service_1_1_game_service" kindref="compound">GameService</ref>(_storageManager,<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.ThrowsException&lt;ArgumentNullException&gt;(()<sp/>=&gt;<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_client_1_1_domain_1_1_services_1_1_game_service_1_1_game_service" kindref="compound">GameService</ref>(</highlight><highlight class="keyword">null</highlight><highlight class="normal">,<sp/>_settings));</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.ThrowsException&lt;ArgumentNullException&gt;(()<sp/>=&gt;<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_client_1_1_domain_1_1_services_1_1_game_service_1_1_game_service" kindref="compound">GameService</ref>(</highlight><highlight class="keyword">null</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>[TestMethod]</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_client_1_1_domain_1_1_tests_1_1_game_service_tests_1a2a0e03ecf5e6aa778ec7d0bd27faa2c8" kindref="member">InvokeGameCommand_ExecuteNewGameCommand_WhenStateIsNew</ref>()</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>gameState<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_client_1_1_domain_1_1_services_1_1_game_service_1_1_game_state" kindref="compound">GameState</ref>();</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameState.Mode<sp/>=<sp/><ref refid="namespace_client_1_1_domain_1_1_services_1_1_settings_1_1_game_settings_service_1a8fc00b2e11a23adfb52c6337982b818a" kindref="member">GameMode</ref>.ManvsMan;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A.CallTo(()<sp/>=&gt;<sp/>_gameSettings.GetGameMode()).Returns(gameState.Mode);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_gameService.InvokeGameCommand(<ref refid="namespace_client_1_1_domain_1_1_services_1_1_server_service_1add704b4a243982a7e74d21abfe8819a0" kindref="member">GameCommand</ref>.NewGame);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A.CallTo(()<sp/>=&gt;<sp/>_settings.GetGameSettings().GetGameMode()).MustHaveHappened();</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(gameState,<sp/>_gameService.GetGameState());</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>[TestMethod]</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_client_1_1_domain_1_1_tests_1_1_game_service_tests_1a17e6c78e43fed53c11e41c7d1e90d674" kindref="member">InvokeGameCommand_ExecuteLoadGameCommand_WhenCallsLoadMethodAndStateIsPredicted</ref>()</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>gameState<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_client_1_1_domain_1_1_services_1_1_game_service_1_1_game_state" kindref="compound">GameState</ref>();</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameState.Mode<sp/>=<sp/><ref refid="namespace_client_1_1_domain_1_1_services_1_1_settings_1_1_game_settings_service_1a8fc00b2e11a23adfb52c6337982b818a" kindref="member">GameMode</ref>.ManvsMan;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A.CallTo(()<sp/>=&gt;<sp/>_storageManager.LoadGame()).Returns(gameState);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_gameService.InvokeGameCommand(<ref refid="namespace_client_1_1_domain_1_1_services_1_1_server_service_1add704b4a243982a7e74d21abfe8819a0" kindref="member">GameCommand</ref>.LoadGame);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A.CallTo(()<sp/>=&gt;<sp/>_storageManager.LoadGame()).MustHaveHappened();</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(gameState,<sp/>_gameService.GetGameState());</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>[TestMethod]</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_client_1_1_domain_1_1_tests_1_1_game_service_tests_1a490f853f801983fce4a1157b3c60b59f" kindref="member">SaveGameCommand_ExecuteSaveGameCommand_WhenCallsSaveMethodWithGameState</ref>()</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_gameService.InvokeGameCommand(<ref refid="namespace_client_1_1_domain_1_1_services_1_1_server_service_1add704b4a243982a7e74d21abfe8819a0" kindref="member">GameCommand</ref>.SaveGame);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A.CallTo(()<sp/>=&gt;<sp/>_storageManager.SaveGame(_gameService.GetGameState())).MustHaveHappened();</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>[TestMethod]</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_client_1_1_domain_1_1_tests_1_1_game_service_tests_1ae94caaf2ff0ebc6a3a68ec9d0bea3bb4" kindref="member">GetServerPort_ReturnConnectedSerialPort_WhenReturnedNeededPort</ref>()</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SerialPort<sp/>port<sp/>=<sp/>A.Fake&lt;SerialPort&gt;();</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A.CallTo(()<sp/>=&gt;<sp/>_portSettings.ConnectedPort).Returns(port);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>receivedPort<sp/>=<sp/>_gameService.GetServerPort();</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(port,<sp/>receivedPort);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>[TestMethod]</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_client_1_1_domain_1_1_tests_1_1_game_service_tests_1a7db9d9b25ed799758b0ec82951a18fce" kindref="member">GetGameState_ReturnCurentGameState_WhenReturnedNewGameState</ref>()</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_client_1_1_domain_1_1_services_1_1_game_service_1_1_game_state" kindref="compound">GameState</ref>(),<sp/>_gameService.GetGameState());</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>[TestMethod]</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_client_1_1_domain_1_1_tests_1_1_game_service_tests_1aa9ece28e8190fa1c95e0aff2e28c4687" kindref="member">Move_ReturnGameState_WhenGameStateUnchanged</ref>()</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>randCellCoordinate<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>gameState<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_client_1_1_domain_1_1_services_1_1_game_service_1_1_game_state" kindref="compound">GameState</ref>();</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameState.Status<sp/>=<sp/><ref refid="namespace_client_1_1_domain_1_1_services_1_1_game_service_1a56791edfaff87576546dcf34241a21c2" kindref="member">GameStatus</ref>.Draw;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameState.Mode<sp/>=<sp/><ref refid="namespace_client_1_1_domain_1_1_services_1_1_settings_1_1_game_settings_service_1a8fc00b2e11a23adfb52c6337982b818a" kindref="member">GameMode</ref>.ManvsMan;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A.CallTo(()<sp/>=&gt;<sp/>_storageManager.LoadGame()).Returns(gameState);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_gameService.InvokeGameCommand(<ref refid="namespace_client_1_1_domain_1_1_services_1_1_server_service_1add704b4a243982a7e74d21abfe8819a0" kindref="member">GameCommand</ref>.LoadGame);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_gameService.Move(randCellCoordinate,<sp/>randCellCoordinate);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(gameState,<sp/>_gameService.GetGameState());</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>[TestMethod]</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>[DataRow(-1,<sp/>0)]</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>[DataRow(0,<sp/>-1)]</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>[DataRow(-1,<sp/>-1)]</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>[DataRow(<ref refid="struct_client_1_1_domain_1_1_services_1_1_game_service_1_1_game_state" kindref="compound">GameState</ref>.<ref refid="struct_client_1_1_domain_1_1_services_1_1_game_service_1_1_game_state_1a3016713805fb038ddd7d3b365f2cd9c5" kindref="member">CellDimensionSize</ref>,<sp/>0)]</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>[DataRow(0,<sp/><ref refid="struct_client_1_1_domain_1_1_services_1_1_game_service_1_1_game_state" kindref="compound">GameState</ref>.<ref refid="struct_client_1_1_domain_1_1_services_1_1_game_service_1_1_game_state_1a3016713805fb038ddd7d3b365f2cd9c5" kindref="member">CellDimensionSize</ref>)]</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>[DataRow(<ref refid="struct_client_1_1_domain_1_1_services_1_1_game_service_1_1_game_state" kindref="compound">GameState</ref>.<ref refid="struct_client_1_1_domain_1_1_services_1_1_game_service_1_1_game_state_1a3016713805fb038ddd7d3b365f2cd9c5" kindref="member">CellDimensionSize</ref>,<sp/><ref refid="struct_client_1_1_domain_1_1_services_1_1_game_service_1_1_game_state" kindref="compound">GameState</ref>.<ref refid="struct_client_1_1_domain_1_1_services_1_1_game_service_1_1_game_state_1a3016713805fb038ddd7d3b365f2cd9c5" kindref="member">CellDimensionSize</ref>)]</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_client_1_1_domain_1_1_tests_1_1_game_service_tests_1ade90eab0694888e3d540b5a73ec272a4" kindref="member">Move_ThrowArgumentOutOfRangeException_WhenCoordinateCellDoNotExist</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>col)</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>gameState<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_client_1_1_domain_1_1_services_1_1_game_service_1_1_game_state" kindref="compound">GameState</ref>();</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameState.Status<sp/>=<sp/><ref refid="namespace_client_1_1_domain_1_1_services_1_1_game_service_1a56791edfaff87576546dcf34241a21c2" kindref="member">GameStatus</ref>.Ongoing;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameState.Mode<sp/>=<sp/><ref refid="namespace_client_1_1_domain_1_1_services_1_1_settings_1_1_game_settings_service_1a8fc00b2e11a23adfb52c6337982b818a" kindref="member">GameMode</ref>.ManvsMan;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A.CallTo(()<sp/>=&gt;<sp/>_storageManager.LoadGame()).Returns(gameState);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_gameService.InvokeGameCommand(<ref refid="namespace_client_1_1_domain_1_1_services_1_1_server_service_1add704b4a243982a7e74d21abfe8819a0" kindref="member">GameCommand</ref>.LoadGame);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.ThrowsException&lt;ArgumentOutOfRangeException&gt;(()<sp/>=&gt;<sp/>_gameService.Move(row,<sp/>col));</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>[TestMethod]</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>[DataRow(0,<sp/>0)]</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_client_1_1_domain_1_1_tests_1_1_game_service_tests_1a73d1f988d4c83bcb9c905013fc183591" kindref="member">Move_MakeMove_WhenBoardChangedPredictably</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>col)</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>gameState<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_client_1_1_domain_1_1_services_1_1_game_service_1_1_game_state" kindref="compound">GameState</ref>();</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameState.Status<sp/>=<sp/><ref refid="namespace_client_1_1_domain_1_1_services_1_1_game_service_1a56791edfaff87576546dcf34241a21c2" kindref="member">GameStatus</ref>.Ongoing;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameState.Mode<sp/>=<sp/><ref refid="namespace_client_1_1_domain_1_1_services_1_1_settings_1_1_game_settings_service_1a8fc00b2e11a23adfb52c6337982b818a" kindref="member">GameMode</ref>.ManvsMan;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A.CallTo(()<sp/>=&gt;<sp/>_storageManager.LoadGame()).Returns(gameState);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_gameService.InvokeGameCommand(<ref refid="namespace_client_1_1_domain_1_1_services_1_1_server_service_1add704b4a243982a7e74d21abfe8819a0" kindref="member">GameCommand</ref>.LoadGame);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_gameService.Move(row,<sp/>col);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>currentState<sp/>=<sp/>_gameService.GetGameState();</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameState.Board[row,<sp/>col]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(gameState,<sp/>currentState);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="D:/Subjects/7 semester/CSAD/Labs/csad2425ki406Zarytskyi07/Lab3-4/Client/Client.Domain.Tests/GameServiceTests.cs"/>
  </compounddef>
</doxygen>
